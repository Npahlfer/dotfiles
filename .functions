# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}

# Change dir to active Finder window, else ~/
function cdf() {
  local fPath=`osascript -e '
  tell app "finder"
  try
    set folderPath to (folder of the front window as alias)
  on error
    set folderPath to (path to home folder as alias)
  end try
  POSIX path of folderPath
  end tell'◊
  `;
  echo "cd $fPath";
  cd "$fPath" > /dev/null
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function phpserver() {
	local port="${2:-8888}"
	if [ -z $1 ]; then
		php -S localhost:${port}
	else
		open "http://localhost:${port}/"
		php -S localhost:${port} -t $1
	fi
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain …"

	# avoid recursion
					# this is the best whois server
													# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# turn that video into webm.
# brew reinstall ffmpeg --with-libvpx
webmify(){
	ffmpeg -i $1 -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y $2 $1.webm
}

# Combining cd command and z
function c() {
	if [ -z "$1" ]; then
		cd ..
	elif [ -d "$1" ]; then
		cd "$@"
	else
		z -c "$@"
	fi
}

# Combining cd command and z, longer range
# I have an alias for cc (= "../..")
function cc() {
	if [ -d "$1" ]; then
		cd $@
	else
		z $@
	fi
}

# generates a unique 192.168.X.X ip adress.
function ipgen() {
	local current=($(grep "192.168.*.*" /etc/hosts | cut -c12-13))
	local gen=$(echo $RANDOM % 99 + 1 | bc)
	local gen2=$(echo $RANDOM % 99 + 1 | bc)
	if [[ $gen != ${current[*]} ]]; then
		echo -e "192.168.$gen.$gen2"
	else
		!!
	fi
}

dash() {
	open dash://$1
}

# Lists files in zip
zlist() {
	unzip -l $1 |
	awk '/-----/ {p = ++p % 2; next} p {print $NF}'
}

# Apple keyboard check - Linux specific
appleKeyboard() {
	if  xinput -list | grep -q "Apple Keyboard"
	then
		echo 2 | sudo tee /sys/module/hid_apple/parameters/fnmode
		echo 0 | sudo tee /sys/module/hid_apple/parameters/iso_layout
		echo 1 | sudo tee /sys/module/hid_apple/parameters/swap_opt_cmd
	else
		echo "No Apple keyboard found"
	fi
}

# mkdir and cd to that directory
# May need quotes around the variable for som systems and directories with spaces:
mdir() {
	mkdir -p -- $1 &&
	cd -P -- $1
}

# mv and move with moved file.
mw() {
	if [ $1 == -* ] && [ ! -z $2 ] && [ ! -z $3 ]; then
		mv $1 $2 $3
		cd $3
	elif [ -z "$3" ];then
		mv $1 $2
		cd $2
	else
		echo "Input error."
	fi
}

# cp and move with copied file.
cpw() {
	if [ $1 == -* ] && [ ! -z $2 ] && [ ! -z $3 ]; then
		cp $1 $2 $3
		cd $3
	elif [ -z "$3" ];then
		cp $1 $2
		cd $2
	else
		echo "Input error."
	fi
}

# example: rename-multiple *.svg abc cba
rename-multiple() {
	for file in $1; do mv $file ${file//$2/$3} ; done
}

# open up process in new tab: "$ ntab process"
function ntab() {
	osascript -e "
	activate application \"iTerm\"
	tell application \"System Events\" to keystroke \"t\" using command down
	tell application \"iTerm\" to tell session -1 of current terminal to write text \"$@\""
}

# Halt all active virtualboxes
haltvms() {
    for VM in `VBoxManage list runningvms | awk '{ print $2; }'`; do VBoxManage controlvm $VM poweroff; done
}

# Halt all active virtualboxes except the one of this directory
halt-all-except-current() {
	vmBOX=(`VBoxManage list runningvms --long | grep "vagrant', Host path:" | awk '{print $5}' | cut -d "'" -f 2`)
	vmBOXId=(`VBoxManage list runningvms --long | grep "Hardware UUID:" | awk '{print $3}'`)

	for ((i=1;i<=${#vmBOX[@]};++i)); do
		if [[ "${PWD}" =~ "${vmBOX[i]}" ]]; then
			echo "No other VM than the one of this directory is running."
		else
			echo -e "Halting ${vmBOX[i]}"
			VBoxManage controlvm {${vmBOXId[i]}} poweroff
		fi
	done

	unset vmBOX
	unset vmBOXId
}

# usage: new-vhost projectName.dev projectDirName
new-vhost() {
local VHOST=$(cat <<EOF
    <VirtualHost *:80>
    ServerAdmin niclas@pahlfer.com
    DocumentRoot "/Users/npahlfer/Projects/$2/"
    ServerName $1
    ServerAlias www.$1
    ErrorLog "/private/var/log/apache2/$1-error_log"
    CustomLog "/private/var/log/apache2/$1-access_log" common

    <Directory "/Users/npahlfer/Projects/$2/">
        Options FollowSymLinks Indexes MultiViews
        AllowOverride All
        Order allow,deny
        Allow from all
    </Directory>

</VirtualHost>
EOF
)

sudo bash -c "echo -e '${VHOST}' >> /etc/apache2/extra/httpd-vhosts.conf"
sudo bash -c "echo -e '127.0.0.1\t$1' >> /etc/hosts"

}

apport() {
	local port=$1
	sudo lsof -nP -iTCP:$port -sTCP:LISTEN
}

getValue() {
	local value
	if [[ ! -z $2 ]]; then
		if [[ ! -z $1 ]]; then
			read -p "${3} [Default: ${1}]: " value
		else
			read -p "${3}: " value
		fi
	fi
	value=${value:-$1}
	echo $value
}

tellWhenFinished() {
	terminal-notifier -message "Job finished" -title "Terminal job"
}

dirSize() {
	du -h -d=1 $1 | sort -n -r
}

listKext() {
	kextstat -l -k | awk '{n = sprintf("%d", $4); print n, $6}' | sort -n
}

todo() {
	if [[ -z $1 ]]; then
		cat ~/Library/Application\ Support/Notational\ Data/todo.txt
	elif [[ $1 -eq -r ]] && [[ ! -z  $2 ]]; then
		sed -i '' "$2d" ~/Library/Application\ Support/Notational\ Data/todo.txt
	else
		echo -e "$1" >> ~/Library/Application\ Support/Notational\ Data/todo.txt
	fi
}
